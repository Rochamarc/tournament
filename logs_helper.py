from classes.club import Club 


class LogsHandler:
    """
    Class that contains static methods to handle the logs 
    generated by the BaseGame class

    ...

    Methods
    -------
    get_game_stats(logs: dict, home: Club, away: Club)
        Return a formated list of Game().logs['game_stats'] from the Game().home and Game().away
    
    prepare_game_stats_logs_to_db(logs: dict)
        Return a formated list of the Game().logs['game_stats'] 
        to be inserted in the tournament.games on Database

    prepare_game_logs_to_db(logs: dict, game_stats_id: list)
        Return a formated list to be inserted in the tournament.game_stats on Database
    
    prepare_championships_logs_to_db(logs: dict, club: int, season: int)
        Returan a formated list to be inserted in the tournament.championships on Database
    """
    
    @staticmethod
    def get_player_stats(logs: dict, stat: str) -> list:
        """Filter the players stats from logs

        Parameters
        ----------
        logs : dict
            Dict of data from from Game().logs
        stat : str
            String the stat that you want to get from logs

        Returns
        -------
            A list with player and number of the stat 
        """
        pass

    @staticmethod
    def get_game_stats(logs: dict, home: Club, away: Club) -> dict:
        """Return the game stats from logs 
        
        Parameters
        ----------
        logs : dict
            The return dict from the Game().logs
        home : Club
            The Club object that matches Game().home
        away : Club
            The Club object that matches Game().home

        Returns
        -------
            Add the clubs's ids on the logs['game_stats'] 
            and return a dict with home and away game_stats 
        """

        logs['game_stats'][home.name]['club_id'] = home.id
        logs['game_stats'][away.name]['club_id'] = away.id

        return logs['game_stats']
    
    @staticmethod
    def prepare_game_stats_logs_to_db(logs: dict) -> list[list]:
        """Convert logs dict to data to be inserted on database 
        
        Parameters
        ----------
        logs : dict
            The Game().logs['game_stats'] with club's id inserted

        Returns
        -------
            A list formated with the data to be inserted in the 
            tournament.game_stats table
        """
        
        data = []

        for _, items in logs.items():
            data.append([
                items['goals'],
                items['shots'],
                items['shots on target'],
                items['fouls'],
                items['passes'],
                items['wrong passes'],
                items['interceptions'],
                items['tackles'],
                items['stolen_balls'],
                items['saves'],
                items['ball possession'],
                items['offsides'],
                items['free kicks'],
                items['penalties'],
                items['club_id']
            ])

        return data

    @staticmethod
    def prepare_game_logs_to_db(logs: dict, game_stats_id: list) -> list:
        """Convert logs dict to data to be inserted on database 
        
        Parameters
        ----------
        logs : dict
            The return dict from Game().logs 
        game_stats_id: list
            A list containing the database game_stats.id from the home and away club
        
        Returns
        -------
            A list formated with the data to be inserted in the 
            tournamet.game table
        """
        
        conditions = logs['field_conditions']['conditions']
        
        return [
            conditions['season'],
            conditions['hour'],
            conditions['climate'],
            conditions['weather'],
            logs['field_conditions']['stadium'],
            logs['field_conditions']['audience'],
            logs['finances']['ticket_price'],
            logs['competitions']['id'],
            game_stats_id[0],
            game_stats_id[1]
        ]

    @staticmethod
    def prepare_championships_logs_to_db(logs: dict, club: Club, season: str) -> list:
        """Convert and prepare the logs to insert a chmapionships table
        
        Parameters
        ----------
        logs : dict
            The return dict from Game().logs
        club : Club
            A Club Object
        season : str
            The value of the season from the championship

        Returns
        -------
            A formated list with a data to be inserted in the 
            tournament.championships table
        
            /* pontos, vitorias, empates, derrotas, gols, sofridos, club_id, season */
            [ points, win, loss, draw, home_goals, away_goals, club_id, season ]
        """
         
        data = []

        # points, wins, draw, loss
        if logs['others']['draw']:
            data += [1,0,1,0]
        elif logs['others']['winner'] == club.name:
            data += [3,1,0,0]
        else:
            data += [0,0,0,1]

        # goals_for, goals_away
        data.append(logs['others']['home_goals'])
        data.append(logs['others']['away_goals'])

        # club_id, season
        data.append(club.id)
        data.append(season)

        return data
    
    @staticmethod
    def prepare_cup_game_logs_to_db(game_data: list, competition_id:int, home_game_stats_id: int, away_game_stats_id: int) -> list:
        """Prepare data list for cup games on database

        Atributes
        ---------
        game_data : list
            The default game data logs
        competition_id : int
            A int value for the competition's id
        home_game_stats_id : int
            A int value for the home game stats
        away_game_stats_id : int
            A int value for the away game stats

        Returns
        -------
            The game_data attribute with competition_id, home_game_stats_id, away_game_stats_id appended to it
        """

        game_data.append(competition_id)
        game_data.append(home_game_stats_id)
        game_data.append(away_game_stats_id)

        return game_data
    
    @staticmethod
    def prepare_knock_out_logs_to_db(phase: str, single_match: int, match_number: int, game_id: int, penalties_id: int=False) -> list:
        """Prepare data list for knock out table on database
        
        Attributes
        ----------
        phase : str
            A string with phase ex: 'round of 32', 'round of 16', 'quarter finals', 'semi finals', 'final'
        single_match : int
            A int value for single_match. 0 for false 1 for true
        match_number : int
            Number of the match 1 of 2 or 2 of 2 case of single_match = False
        game_id : int
            A int value for the game_id
        penalties_id : int
            A int value for the penalties id if penalties is True
        
        Returns
        -------
            A list with [ phase, single_match, match_number, game_id, penalties_id if True ]
        """
        
        data = [
            phase,
            single_match,
            match_number,
            game_id
        ]

        if penalties_id:
            data.append(penalties_id)
        
        return data